#if (USE_H801==0) && (USE_DMXDUMMY==0)
// save some unsigned ints


#include "timetable.h"

const PROGMEM  uint16_t dimStepTime[256][4] = {

/*1*/ {258, 2134, 2779, 2826},
/*2*/ {257, 1504, 2529, 2794},
/*3*/ {257, 1230, 2193, 2693},
/*4*/ {257, 1068, 1884, 2509},
/*5*/ {257, 956, 1636, 2271},
/*6*/ {257, 873, 1439, 2019},
/*7*/ {257, 810, 1286, 1784},
/*8*/ {257, 757, 1161, 1581},
/*9*/ {257, 715, 1061, 1411},
/*10*/ {257, 678, 977, 1268},
/*11*/ {257, 647, 908, 1150},
/*12*/ {257, 619, 848, 1050},
/*13*/ {257, 595, 797, 966},
/*14*/ {257, 574, 752, 895},
/*15*/ {257, 554, 713, 833},
/*16*/ {257, 537, 678, 779},
/*17*/ {257, 521, 647, 733},
/*18*/ {257, 506, 619, 691},
/*19*/ {257, 493, 594, 655},
/*20*/ {257, 480, 571, 622},
/*21*/ {257, 469, 549, 593},
/*22*/ {257, 458, 531, 566},
/*23*/ {257, 448, 513, 542},
/*24*/ {257, 438, 497, 519},
/*25*/ {257, 430, 482, 500},
/*26*/ {257, 422, 468, 481},
/*27*/ {257, 413, 454, 465},
/*28*/ {257, 406, 442, 448},
/*29*/ {257, 399, 431, 434},
/*30*/ {257, 393, 420, 420},
/*31*/ {257, 386, 410, 408},
/*32*/ {257, 380, 400, 395},
/*33*/ {257, 374, 391, 385},
/*34*/ {257, 369, 382, 373},
/*35*/ {257, 363, 374, 365},
/*36*/ {257, 358, 367, 354},
/*37*/ {257, 354, 359, 346},
/*38*/ {257, 349, 352, 338},
/*39*/ {257, 344, 346, 330},
/*40*/ {257, 340, 339, 322},
/*41*/ {257, 336, 333, 316},
/*42*/ {257, 331, 327, 308},
/*43*/ {257, 328, 322, 302},
/*44*/ {257, 324, 316, 296},
/*45*/ {258, 321, 311, 290},
/*46*/ {257, 317, 306, 285},
/*47*/ {257, 314, 301, 279},
/*48*/ {257, 310, 297, 274},
/*49*/ {257, 307, 292, 269},
/*50*/ {257, 304, 288, 264},
/*51*/ {257, 302, 284, 260},
/*52*/ {258, 298, 280, 255},
/*53*/ {257, 295, 276, 251},
/*54*/ {257, 293, 272, 247},
/*55*/ {257, 290, 269, 244},
/*56*/ {257, 287, 265, 239},
/*57*/ {257, 285, 262, 236},
/*58*/ {257, 282, 259, 232},
/*59*/ {258, 280, 255, 229},
/*60*/ {257, 278, 253, 226},
/*61*/ {257, 275, 249, 222},
/*62*/ {257, 274, 246, 219},
/*63*/ {257, 271, 244, 217},
/*64*/ {257, 268, 241, 214},
/*65*/ {257, 267, 238, 210},
/*66*/ {257, 265, 236, 208},
/*67*/ {257, 263, 233, 205},
/*68*/ {257, 261, 230, 203},
/*69*/ {257, 259, 229, 200},
/*70*/ {257, 257, 226, 198},
/*71*/ {257, 255, 224, 195},
/*72*/ {257, 253, 221, 193},
/*73*/ {257, 252, 219, 191},
/*74*/ {257, 250, 217, 189},
/*75*/ {257, 249, 215, 186},
/*76*/ {257, 246, 213, 184},
/*77*/ {257, 245, 211, 183},
/*78*/ {257, 244, 209, 181},
/*79*/ {257, 242, 208, 179},
/*80*/ {257, 241, 206, 177},
/*81*/ {257, 239, 204, 175},
/*82*/ {257, 238, 202, 173},
/*83*/ {257, 236, 200, 171},
/*84*/ {257, 235, 199, 170},
/*85*/ {257, 233, 197, 168},
/*86*/ {257, 232, 195, 166},
/*87*/ {258, 231, 193, 164},
/*88*/ {257, 229, 192, 163},
/*89*/ {257, 228, 191, 162},
/*90*/ {257, 227, 189, 160},
/*91*/ {257, 225, 187, 159},
/*92*/ {257, 225, 186, 157},
/*93*/ {257, 223, 185, 156},
/*94*/ {257, 222, 183, 154},
/*95*/ {258, 221, 182, 153},
/*96*/ {257, 220, 181, 152},
/*97*/ {257, 219, 179, 150},
/*98*/ {257, 217, 178, 149},
/*99*/ {257, 216, 176, 148},
/*100*/ {257, 216, 176, 147},
/*101*/ {258, 214, 174, 146},
/*102*/ {257, 213, 173, 144},
/*103*/ {257, 212, 172, 143},
/*104*/ {257, 211, 171, 142},
/*105*/ {257, 210, 170, 141},
/*106*/ {257, 209, 168, 140},
/*107*/ {257, 208, 168, 139},
/*108*/ {257, 207, 166, 138},
/*109*/ {258, 206, 165, 137},
/*110*/ {257, 205, 164, 136},
/*111*/ {257, 204, 163, 135},
/*112*/ {257, 204, 162, 134},
/*113*/ {257, 202, 161, 133},
/*114*/ {257, 202, 160, 132},
/*115*/ {258, 201, 159, 131},
/*116*/ {257, 200, 158, 130},
/*117*/ {257, 199, 157, 129},
/*118*/ {257, 198, 156, 128},
/*119*/ {257, 198, 155, 127},
/*120*/ {257, 197, 154, 126},
/*121*/ {257, 196, 153, 125},
/*122*/ {257, 195, 152, 125},
/*123*/ {258, 194, 152, 124},
/*124*/ {257, 193, 151, 123},
/*125*/ {257, 192, 150, 122},
/*126*/ {257, 192, 149, 121},
/*127*/ {257, 191, 148, 121},
/*128*/ {257, 190, 148, 120},
/*129*/ {257, 189, 147, 119},
/*130*/ {257, 189, 146, 119},
/*131*/ {257, 188, 145, 118},
/*132*/ {257, 187, 144, 117},
/*133*/ {257, 187, 144, 116},
/*134*/ {257, 186, 143, 116},
/*135*/ {257, 186, 142, 115},
/*136*/ {257, 185, 142, 114},
/*137*/ {257, 184, 140, 113},
/*138*/ {257, 183, 140, 113},
/*139*/ {257, 183, 139, 112},
/*140*/ {257, 182, 138, 112},
/*141*/ {257, 182, 138, 111},
/*142*/ {257, 181, 137, 110},
/*143*/ {257, 180, 136, 110},
/*144*/ {257, 180, 136, 109},
/*145*/ {257, 179, 135, 109},
/*146*/ {257, 178, 135, 108},
/*147*/ {257, 177, 134, 107},
/*148*/ {257, 177, 133, 107},
/*149*/ {257, 176, 133, 106},
/*150*/ {257, 176, 132, 106},
/*151*/ {257, 175, 131, 105},
/*152*/ {257, 175, 131, 105},
/*153*/ {257, 174, 130, 104},
/*154*/ {257, 174, 130, 103},
/*155*/ {257, 173, 129, 103},
/*156*/ {257, 172, 128, 102},
/*157*/ {257, 172, 128, 102},
/*158*/ {257, 171, 127, 101},
/*159*/ {257, 171, 127, 101},
/*160*/ {257, 170, 126, 100},
/*161*/ {257, 170, 126, 100},
/*162*/ {257, 169, 125, 99},
/*163*/ {257, 168, 124, 99},
/*164*/ {257, 168, 124, 98},
/*165*/ {257, 168, 124, 98},
/*166*/ {257, 167, 123, 97},
/*167*/ {257, 167, 123, 97},
/*168*/ {257, 166, 122, 96},
/*169*/ {257, 165, 122, 96},
/*170*/ {257, 165, 121, 95},
/*171*/ {258, 165, 121, 95},
/*172*/ {257, 164, 120, 95},
/*173*/ {257, 164, 120, 94},
/*174*/ {257, 163, 119, 94},
/*175*/ {257, 163, 119, 93},
/*176*/ {257, 163, 118, 93},
/*177*/ {257, 162, 118, 92},
/*178*/ {257, 162, 117, 92},
/*179*/ {258, 161, 117, 92},
/*180*/ {257, 160, 116, 91},
/*181*/ {257, 160, 116, 91},
/*182*/ {257, 160, 116, 91},
/*183*/ {257, 159, 115, 90},
/*184*/ {257, 159, 115, 90},
/*185*/ {257, 158, 114, 89},
/*186*/ {257, 158, 114, 89},
/*187*/ {258, 158, 113, 89},
/*188*/ {257, 157, 113, 88},
/*189*/ {257, 157, 113, 88},
/*190*/ {257, 156, 112, 87},
/*191*/ {257, 156, 112, 87},
/*192*/ {257, 155, 111, 86},
/*193*/ {257, 155, 111, 86},
/*194*/ {257, 155, 111, 86},
/*195*/ {258, 154, 110, 86},
/*196*/ {257, 154, 110, 85},
/*197*/ {257, 154, 109, 85},
/*198*/ {257, 153, 109, 85},
/*199*/ {258, 153, 109, 84},
/*200*/ {257, 152, 108, 84},
/*201*/ {257, 152, 108, 84},
/*202*/ {257, 151, 107, 83},
/*203*/ {257, 151, 107, 83},
/*204*/ {257, 151, 107, 83},
/*205*/ {257, 150, 106, 82},
/*206*/ {257, 150, 106, 82},
/*207*/ {258, 150, 105, 82},
/*208*/ {257, 149, 105, 81},
/*209*/ {257, 149, 105, 81},
/*210*/ {257, 149, 104, 81},
/*211*/ {257, 148, 104, 80},
/*212*/ {257, 148, 104, 80},
/*213*/ {257, 147, 104, 80},
/*214*/ {257, 147, 103, 80},
/*215*/ {258, 147, 103, 79},
/*216*/ {257, 147, 102, 79},
/*217*/ {257, 146, 102, 79},
/*218*/ {257, 146, 102, 78},
/*219*/ {257, 146, 102, 78},
/*220*/ {257, 145, 101, 78},
/*221*/ {257, 145, 101, 77},
/*222*/ {257, 144, 101, 77},
/*223*/ {257, 144, 101, 77},
/*224*/ {257, 144, 100, 77},
/*225*/ {257, 144, 100, 76},
/*226*/ {257, 143, 99, 76},
/*227*/ {257, 143, 99, 76},
/*228*/ {258, 143, 99, 76},
/*229*/ {257, 142, 98, 75},
/*230*/ {257, 142, 98, 75},
/*231*/ {257, 142, 98, 75},
/*232*/ {257, 141, 98, 75},
/*233*/ {257, 141, 97, 74},
/*234*/ {257, 141, 97, 74},
/*235*/ {257, 141, 97, 74},
/*236*/ {258, 140, 97, 74},
/*237*/ {257, 140, 96, 73},
/*238*/ {257, 140, 96, 73},
/*239*/ {257, 140, 96, 73},
/*240*/ {257, 139, 96, 73},
/*241*/ {257, 139, 95, 72},
/*242*/ {257, 138, 95, 72},
/*243*/ {257, 138, 95, 72},
/*244*/ {258, 138, 94, 72},
/*245*/ {257, 137, 94, 71},
/*246*/ {257, 138, 94, 71},
/*247*/ {257, 137, 93, 71},
/*248*/ {257, 137, 93, 71},
/*249*/ {257, 136, 93, 71},
/*250*/ {257, 136, 93, 70},
/*251*/ {257, 136, 93, 70},
/*252*/ {258, 136, 92, 70},
/*253*/ {257, 135, 92, 70},
/*254*/ {257, 135, 92, 69},
/*255*/ {237, 109, 55, 27},
/*255*/ {237, 109, 55, 27}};

const PROGMEM  uint_dmxValue proztable[101][4] = {
{0, 0, 0, 0},
{3, 0, 0, 0},
{5, 1, 0, 0},
{8, 1, 1, 1},
{10, 1, 1, 1},
{13, 2, 1, 1},
{15, 2, 1, 1},
{18, 3, 2, 2},
{20, 3, 2, 2},
{23, 4, 2, 2},
{26, 5, 3, 2},
{28, 5, 3, 3},
{31, 6, 3, 3},
{33, 7, 4, 3},
{36, 8, 4, 3},
{38, 9, 4, 4},
{41, 10, 5, 4},
{43, 11, 5, 4},
{46, 12, 6, 4},
{48, 13, 6, 5},
{51, 14, 6, 5},
{54, 15, 7, 5},
{56, 16, 8, 6},
{59, 18, 8, 6},
{61, 19, 9, 6},
{64, 20, 9, 7},
{66, 22, 10, 7},
{69, 23, 11, 7},
{71, 25, 12, 8},
{74, 26, 12, 8},
{77, 28, 13, 9},
{79, 29, 14, 9},
{82, 31, 15, 10},
{84, 33, 16, 10},
{87, 35, 17, 11},
{89, 37, 18, 12},
{92, 38, 19, 12},
{94, 40, 20, 13},
{97, 42, 22, 14},
{99, 44, 23, 14},
{102, 46, 24, 15},
{105, 48, 25, 16},
{107, 51, 27, 17},
{110, 53, 28, 18},
{112, 55, 30, 19},
{115, 57, 32, 20},
{117, 60, 33, 21},
{120, 62, 35, 22},
{122, 65, 37, 23},
{125, 67, 39, 25},
{128, 70, 41, 26},
{130, 72, 43, 28},
{133, 75, 45, 29},
{135, 77, 47, 31},
{138, 80, 49, 32},
{140, 83, 51, 34},
{143, 86, 54, 36},
{145, 89, 56, 38},
{148, 91, 59, 40},
{150, 94, 61, 42},
{153, 97, 64, 44},
{156, 100, 67, 46},
{158, 103, 70, 49},
{161, 107, 73, 51},
{163, 110, 76, 54},
{166, 113, 79, 56},
{168, 116, 82, 59},
{171, 120, 85, 62},
{173, 123, 89, 65},
{176, 126, 92, 69},
{179, 130, 96, 72},
{181, 133, 99, 75},
{184, 137, 103, 79},
{186, 140, 107, 83},
{189, 144, 111, 87},
{191, 148, 115, 91},
{194, 152, 119, 95},
{196, 155, 124, 99},
{199, 159, 128, 104},
{201, 163, 133, 109},
{204, 167, 137, 113},
{207, 171, 142, 119},
{209, 175, 147, 124},
{212, 179, 152, 129},
{214, 183, 157, 135},
{217, 187, 162, 141},
{219, 191, 167, 147},
{222, 196, 173, 153},
{224, 200, 178, 159},
{227, 204, 184, 166},
{230, 209, 190, 173},
{232, 213, 196, 180},
{235, 218, 202, 187},
{237, 222, 208, 195},
{240, 227, 214, 203},
{242, 231, 221, 211},
{245, 236, 227, 219},
{247, 241, 234, 228},
{250, 245, 241, 237},
{252, 250, 248, 246},
{255, 255, 255, 255}};


uint_times _dimStepTime(uint_dmxChannel value, uint8_t gamma, bool fake1) {
  #ifdef ARDUINO 
  uint16_t result = pgm_read_word(&(dimStepTime[value][gamma]));
  #else
  uint16_t result = dimStepTime[value][gamma];
  #endif
  if ((value < DIMMER_START_LEVEL) && (fake1) ){
    return 1;
  } else if ((value == DIMMER_START_LEVEL) && (fake1)) {
    while (value > 0) {
      value = value - 1;
      result = result + _dimStepTime(value, gamma, false);
    }
  }
  return result;
}

uint_dmxValue _prozToDim(uint8_t value, uint8_t gamma) {
  #ifdef ARDUINO 
  uint_dmxValue result = pgm_read_byte(&(proztable[value][gamma]));
  #else
  uint_dmxValue result = proztable[value][gamma];
  #endif
  if ((value > 0) && (result == 0)) {
    result = DIMMER_START_LEVEL;
  }
  return result;
  
}
#endif